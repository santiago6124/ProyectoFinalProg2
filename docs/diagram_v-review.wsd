@startuml

' -			private
' #			protected
' ~			package private
' +			public

class Tablero {
    - [][] coordenadas: Coordenada
    - size : int // tama単o del tablero
    + Tablero(int size) : constructor
        '   -> inicializa objetos Coordenada en coordenadas
    + mostrarTablero() : void
        '   -> mostrarTablero: imprime el tablero, validando: coord.getBarco(), coord.isTocado()
    + colocarBarco(int x, int y, Barco) : void
        '   -> Coordenas.setBarco, 多多多 barco.agregarCoordenada ???
    + atacar(int x, int y) : bool
        '   -> Coordenas.setBarco, coord.setTocado(true), coord.getBarco()->recibirGolpe()
    + todosBarcosHundidos() : bool
        '   -> return all barco.isHundido()
    + getSize(): int
        '   -> return size
}

class Coordenada {
    - letra : str
    - numero : int
    - Barco: Barco, default=null
    - tocado : bool, default=false
    + Coordenada() : constructor
        '   
    + Coordenada(str letra, int numero) : constructor
        '   -> letra_, numero_
    + getLetra() : str
        '   -> return letra
    + getNumero() : int
        '   -> return numero
    + isTocado() : bool
        '   -> return tocado
    + getBarco() : Barco
        '   -> return barco
    + setBarco(Barco) : void
        '   -> this->barco = barco
    + setTocado() : void
        '   -> this->tocado = tocado
}

Tablero "1" o-- "0..*" Coordenada

class Barco {
    - longitud : int //n coordenadas que ocupa
    - horizontal : bool // orientacion
    - hundido : bool, default=false
    - contGolpes : int, default=0
    + Barco(int longitud, bool horizontal) : constructor
        '   -> longitud_, horizontal_
    + verificarHundido() : bool
        '   -> return contGolpes == longitud
    + recibirGolpe() : void
        '   -> contGolpes++, validar si hundido asignar = true
    + getLongitud() : int
        '   -> return longitud
    + isHorizontal() : bool
        '   -> return horizontal
    + isHundido() : bool
        '   -> return hundido

}

Coordenada "1" o-- "0..*" Barco

class Jugador {
    # nombre : str
    # tablero : Tablero
    ' - [] barcos : Barco
    ' - [] disparos : Coordenada
    + Jugador(str nombre, int sizeTablero) : constructor
        '   -> nombre_, sizeTablero_
    + getNombre() : str
    + getTablero() : Tablero
    + colocarBarco(int x, int y, Barco& barco) : bool
    + atacar(Tablero& tableroOponente, int x, int y) : virtual bool
    + todosBarcosHundidos() : bool
}

class Usuario {
    + Usuario(string nombre, int sizeTablero) : constructor
    + colocarBarco(int x, int y, Barco& barco) : bool
    + atacar(int x, int y) : bool
}

class Maquina {
    + Maquina(string nombre, int sizeTablero) : constructor
    + colocarBarco(int x, int y, Barco& barco) : bool
    + atacar(int x, int y) : bool
}

Usuario --|> Jugador
Maquina --|> Jugador

Jugador "1" o-- "1" Tablero

class Juego {
    - jugador1: Jugador
    - jugador2: Jugador
    + Juego(const string& nombreJugador1, const string& nombreJugador2, int size)
        : jugador1(nombreJugador1, size), jugador2(nombreJugador2, size) {}
    + jugar()
}

Juego "1" o-- "1" Jugador

@enduml